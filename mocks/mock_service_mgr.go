// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Demonware/balanced/pkg/apis/balanced/v1alpha1 (interfaces: ServiceManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/Demonware/balanced/pkg/apis/balanced/v1alpha1"
	reflect "reflect"
)

// MockServiceManager is a mock of ServiceManager interface
type MockServiceManager struct {
	ctrl     *gomock.Controller
	recorder *MockServiceManagerMockRecorder
}

// MockServiceManagerMockRecorder is the mock recorder for MockServiceManager
type MockServiceManagerMockRecorder struct {
	mock *MockServiceManager
}

// NewMockServiceManager creates a new mock instance
func NewMockServiceManager(ctrl *gomock.Controller) *MockServiceManager {
	mock := &MockServiceManager{ctrl: ctrl}
	mock.recorder = &MockServiceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceManager) EXPECT() *MockServiceManagerMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockServiceManager) Add(arg0 *v1alpha1.Service, arg1 ...v1alpha1.ServiceOnChangeHandler) error {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockServiceManagerMockRecorder) Add(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockServiceManager)(nil).Add), varargs...)
}

// Exists mocks base method
func (m *MockServiceManager) Exists(arg0 *v1alpha1.Service) bool {
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockServiceManagerMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockServiceManager)(nil).Exists), arg0)
}

// Get mocks base method
func (m *MockServiceManager) Get(arg0 string) (*v1alpha1.Service, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1alpha1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockServiceManagerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServiceManager)(nil).Get), arg0)
}

// List mocks base method
func (m *MockServiceManager) List() []*v1alpha1.Service {
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*v1alpha1.Service)
	return ret0
}

// List indicates an expected call of List
func (mr *MockServiceManagerMockRecorder) List() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceManager)(nil).List))
}

// ListServicesWithAddress mocks base method
func (m *MockServiceManager) ListServicesWithAddress() []*v1alpha1.Service {
	ret := m.ctrl.Call(m, "ListServicesWithAddress")
	ret0, _ := ret[0].([]*v1alpha1.Service)
	return ret0
}

// ListServicesWithAddress indicates an expected call of ListServicesWithAddress
func (mr *MockServiceManagerMockRecorder) ListServicesWithAddress() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesWithAddress", reflect.TypeOf((*MockServiceManager)(nil).ListServicesWithAddress))
}

// Remove mocks base method
func (m *MockServiceManager) Remove(arg0 *v1alpha1.Service, arg1 ...v1alpha1.ServiceOnChangeHandler) error {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Remove", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockServiceManagerMockRecorder) Remove(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockServiceManager)(nil).Remove), varargs...)
}

// RemoveByID mocks base method
func (m *MockServiceManager) RemoveByID(arg0 string, arg1 ...v1alpha1.ServiceOnChangeHandler) error {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveByID", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByID indicates an expected call of RemoveByID
func (mr *MockServiceManagerMockRecorder) RemoveByID(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByID", reflect.TypeOf((*MockServiceManager)(nil).RemoveByID), varargs...)
}

// RemoveExistingServicesNoLongerCurrent mocks base method
func (m *MockServiceManager) RemoveExistingServicesNoLongerCurrent(arg0, arg1 []*v1alpha1.Service, arg2 ...v1alpha1.ServiceOnChangeHandler) error {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveExistingServicesNoLongerCurrent", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveExistingServicesNoLongerCurrent indicates an expected call of RemoveExistingServicesNoLongerCurrent
func (mr *MockServiceManagerMockRecorder) RemoveExistingServicesNoLongerCurrent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveExistingServicesNoLongerCurrent", reflect.TypeOf((*MockServiceManager)(nil).RemoveExistingServicesNoLongerCurrent), varargs...)
}

// RemoveServicesRecursively mocks base method
func (m *MockServiceManager) RemoveServicesRecursively(arg0 []*v1alpha1.Service, arg1 []v1alpha1.ServiceOnChangeHandler, arg2 []v1alpha1.EndpointOnChangeHandler) error {
	ret := m.ctrl.Call(m, "RemoveServicesRecursively", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveServicesRecursively indicates an expected call of RemoveServicesRecursively
func (mr *MockServiceManagerMockRecorder) RemoveServicesRecursively(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServicesRecursively", reflect.TypeOf((*MockServiceManager)(nil).RemoveServicesRecursively), arg0, arg1, arg2)
}

// ResolveByKubeMetaNamespaceKey mocks base method
func (m *MockServiceManager) ResolveByKubeMetaNamespaceKey(arg0 string) ([]*v1alpha1.Service, error) {
	ret := m.ctrl.Call(m, "ResolveByKubeMetaNamespaceKey", arg0)
	ret0, _ := ret[0].([]*v1alpha1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveByKubeMetaNamespaceKey indicates an expected call of ResolveByKubeMetaNamespaceKey
func (mr *MockServiceManagerMockRecorder) ResolveByKubeMetaNamespaceKey(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveByKubeMetaNamespaceKey", reflect.TypeOf((*MockServiceManager)(nil).ResolveByKubeMetaNamespaceKey), arg0)
}

// Update mocks base method
func (m *MockServiceManager) Update(arg0 *v1alpha1.Service, arg1 ...v1alpha1.ServiceOnChangeHandler) (bool, *v1alpha1.Service, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*v1alpha1.Service)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update
func (mr *MockServiceManagerMockRecorder) Update(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceManager)(nil).Update), varargs...)
}

// UpdateServicesRecursively mocks base method
func (m *MockServiceManager) UpdateServicesRecursively(arg0 []*v1alpha1.Service, arg1 []*v1alpha1.Endpoint, arg2 []v1alpha1.ServiceOnChangeHandler, arg3 []v1alpha1.EndpointOnChangeHandler) error {
	ret := m.ctrl.Call(m, "UpdateServicesRecursively", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServicesRecursively indicates an expected call of UpdateServicesRecursively
func (mr *MockServiceManagerMockRecorder) UpdateServicesRecursively(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServicesRecursively", reflect.TypeOf((*MockServiceManager)(nil).UpdateServicesRecursively), arg0, arg1, arg2, arg3)
}
